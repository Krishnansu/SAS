
//ADD_USER: http://localhost:3000/api/auth/signup

{
    "user_name": "Alice Johnson",
    "user_email": "alice.johnson@example.com",
    "user_password": "strongpassword123", 
    "user_role": "salesman" 
}

//LOGIN: http://localhost:3000/api/auth/login
{
    "user_email": "testuser@example.com", 
    "user_password": "securepassword"  
}


//ADD_INVENTORY: http://localhost:3000/api/inventory
{
    "item_name": "Laptop", 
    "cost_price": 850,
    "sell_price": 1000,
    "stock": 20 
}

//ADD_SALES: http://localhost:3000/api/sales/bulk
{
    "items": [
        { "item_id": 3, "quantity": 1 }, 
        { "item_id": 2, "quantity": 1 },
        { "item_id": 5, "quantity": 3 }
    ]
}

Models


const counterSchema = new mongoose.Schema({
    counter_id: { type: String, required: true }, 
    seq: { type: Number, default: 1 }
});


const inventorySchema = new mongoose.Schema({
    item_id: { type: Number, required: true, unique: true },
    item_name: { type: String, required: true },
    cost_price: { type: Number, required: true },
    sell_price: { type: Number, required: true },
    stock: { type: Number, required: true },
    created_date: {
        type: Date,
        default: Date.now // Automatic timestamp for when the item is created
      },
    modified_date: {
        type: Date,
        default: Date.now
      }
});

inventorySchema.pre('save', function (next) {
    this.modified_date = Date.now();
    next(); 
});

const salesSchema = new mongoose.Schema({
    item_id: { type: Number, required: true }, 
    quantity: { type: Number, required: true },
    bill_id: { type: Number, required: true },
    employee_name: {type: String, required: true},
    sell_date: { type: Date, required: true }, 
    cost_price: { type: Number, required: true },
    sell_price: { type: Number, required: true }
});

const userRoleEnum = ['manager', 'salesman'];

const userSchema = new mongoose.Schema({
    user_id: { type: Number, required: true, unique: true},
    user_name: { type: String, required: true },
    user_role: { type: String, required: true, enum: userRoleEnum },
    user_email: { type: String, required: true, unique: true },
    user_password: { type: String, required: true }
});

userSchema.pre('save', async function (next) {
    if (!this.isModified('user_password')) return next(); 

    const salt = await bcrypt.genSalt(10);  
    this.user_password = await bcrypt.hash(this.user_password, salt);
    next();
});

// Add a method for comparing passwords
userSchema.methods.comparePassword = async function(candidatePassword) {
    return await bcrypt.compare(candidatePassword, this.user_password);
};


//Backend index.js file :
app.use(express.json()); 


app.use('/api/auth', authRoutes);
app.use('/api/users', authMiddleware, userRoutes);
app.use('/api/inventory', authMiddleware, inventoryRoutes);
app.use('/api/sales', authMiddleware, salesRoutes);


// Start the server
const port = process.env.PORT; // PORT=3000
app.listen(port, () => console.log(`Server listening on port ${port}`));


//Backend Routes :
const authController = require('../controllers/authController');
const { body } = require('express-validator'); 

router.post('/signup', [
    body('user_email').isEmail().normalizeEmail(), 
    body('user_password').isLength({ min: 6 }) 
], authController.signup);

router.post('/login', [
    body('user_email').isEmail().normalizeEmail(), 
    body('user_password').exists()
], authController.login); 

const inventoryController = require('../controllers/inventoryController');
const authMiddleware = require('../middleware/auth'); // Import your middleware

// Protected routes
router.post('/', authMiddleware, inventoryController.addItem);
router.delete('/:itemId', authMiddleware, inventoryController.removeItem);  
router.patch('/:itemId', authMiddleware, inventoryController.modifyItem); 

// Public route (if needed)
router.get('/', inventoryController.fetchItems); // Assuming this is OK to be public

const salesController = require('../controllers/salesController');
const authMiddleware = require('../middleware/auth'); // Import your middleware

// Protected sales routes
router.post('/', authMiddleware, salesController.addSale);
router.get('/', authMiddleware, salesController.fetchAllSales);
router.get('/bill/:billId', authMiddleware, salesController.fetchSalesByBillId);
router.get('/item/:itemId', authMiddleware, salesController.fetchSalesByItemId);
router.get('/stats/item/:itemId', authMiddleware, salesController.fetchSalesStatsByDate);
router.get('/stats/item/:itemId/range', authMiddleware, salesController.fetchSalesStatsByDateRange);
router.post('/bulk', authMiddleware, salesController.createBulkSale);

const authMiddleware = require('../middleware/auth'); // Import your authentication middleware
const userController = require('../controllers/userController');

router.get('/me', authMiddleware, userController.getCurrentUserDetails); 

module.exports = router;



/api/auth
  /login (post)
  /signup (post)
  /logout (post)

/api/inventory
  / (get,post)
  /:itemId  (get, patch ,delete)

/api/sales
  /  (get,post)
  /bill/:billId  (get)
  /item/:itemId  (get)
  /stats/item/:itemId  (get)
  /stats/item/:itemId/range  (get)
  /bulk  (post)


  
const userRoleEnum = ['manager', 'salesman'];

const userSchema = new mongoose.Schema({
    user_id: { type: Number, required: true, unique: true},
    user_name: { type: String, required: true },
    user_role: { type: String, required: true, enum: userRoleEnum },
    user_email: { type: String, required: true, unique: true },
    user_password: { type: String, required: true }
});

userSchema.pre('save', async function (next) {
    if (!this.isModified('user_password')) return next(); 

    const salt = await bcrypt.genSalt(10);  
    this.user_password = await bcrypt.hash(this.user_password, salt);
    next();
});

const inventorySchema = new mongoose.Schema({
    item_id: { type: Number, required: true, unique: true },
    item_name: { type: String, required: true },
    cost_price: { type: Number, required: true },
    sell_price: { type: Number, required: true },
    stock: { type: Number, required: true },
    created_date: {
        type: Date,
        default: Date.now // Automatic timestamp for when the item is created
      },
    modified_date: {
        type: Date,
        default: Date.now
      }
});

const salesSchema = new mongoose.Schema({
    item_id: { type: Number, required: true }, 
    quantity: { type: Number, required: true },
    bill_id: { type: Number, required: true },
    employee_name: {type: String, required: true},
    sell_date: { type: Date, required: true }, 
    cost_price: { type: Number, required: true },
    sell_price: { type: Number, required: true }
});